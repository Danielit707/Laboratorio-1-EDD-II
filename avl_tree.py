# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVexKJKla6rG1yedGcRNbwt1uzqpRco6
"""

!pip install graphviz
from IPython.display import Image

from graphviz import Digraph
from IPython.display import display, Image
import os
import platform

class NodoPelicula:
    def __init__(self, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent):
        self.titulo = titulo
        self.año = año
        self.worldwide_earnings = worldwide_earnings
        self.domestic_earnings = domestic_earnings
        self.foreign_earnings = foreign_earnings
        self.domestic_percent = domestic_percent
        self.foreign_percent = foreign_percent
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def get_height(self, nodo):
        if not nodo:
            return 0
        return nodo.height

    def get_balance(self, nodo):
        if not nodo:
            return 0
        return self.get_height(nodo.left) - self.get_height(nodo.right)

    def rotate_right(self, y):
        x = y.left
        T2 = x.right

        x.right = y
        y.left = T2

        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))

        return x

    def rotate_left(self, x):
        y = x.right
        T2 = y.left

        y.left = x
        x.right = T2

        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        return y

    def insert(self, root, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent):
        if not root:
            return NodoPelicula(titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)

        # Comparación insensible a mayúsculas
        if titulo.lower() < root.titulo.lower():
            root.left = self.insert(root.left, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)
        else:
            root.right = self.insert(root.right, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        balance = self.get_balance(root)

        if balance > 1 and titulo.lower() < root.left.titulo.lower():
            return self.rotate_right(root)

        if balance < -1 and titulo.lower() > root.right.titulo.lower():
            return self.rotate_left(root)

        if balance > 1 and titulo.lower() > root.left.titulo.lower():
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)

        if balance < -1 and titulo.lower() < root.right.titulo.lower():
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)

        return root

    def pre_order(self, root):
        if not root:
            return

        print(f"{root.titulo} ({root.año})")
        self.pre_order(root.left)
        self.pre_order(root.right)

    def visualize_tree(self, root):
        dot = Digraph()

        def add_node(nodo):
            if nodo:
                safe_title = nodo.titulo.replace(" ", "_").replace(":", "_")  # Reemplaza espacios y dos puntos
                dot.node(safe_title, f"{nodo.titulo} ({nodo.año})")
                if nodo.left:
                    safe_left = nodo.left.titulo.replace(" ", "_").replace(":", "_")
                    dot.edge(safe_title, safe_left)
                if nodo.right:
                    safe_right = nodo.right.titulo.replace(" ", "_").replace(":", "_")
                    dot.edge(safe_title, safe_right)
                add_node(nodo.left)
                add_node(nodo.right)

        add_node(root)
        return dot

    def save_tree(self, filename='avl_tree'):
        dot = self.visualize_tree(self.root)
        dot.render(filename, format='png', cleanup=True)

    def show_tree(self, filename='avl_tree'):
        self.save_tree(filename)
        # Mostrar la imagen en la consola
        display(Image(f"{filename}.png"))

    # Implementación del método de búsqueda
    def search(self, root, titulo):
        if root is None or root.titulo.lower() == titulo.lower():
            return root

        if titulo.lower() < root.titulo.lower():
            return self.search(root.left, titulo)

        return self.search(root.right, titulo)

def menu():
    avl = AVLTree()

    while True:
        print("\n--- Menú AVL de Películas ---")
        print("1. Insertar película")
        print("2. Buscar película")
        print("3. Mostrar árbol (Pre-orden)")
        print("4. Guardar árbol")
        print("5. Salir")

        opcion = input("Elige una opción: ")

        if opcion == '1':
            titulo = input("Título: ")
            año = int(input("Año: "))
            worldwide_earnings = float(input("Recaudación global: "))
            domestic_earnings = float(input("Recaudación nacional: "))
            foreign_earnings = float(input("Recaudación extranjera: "))
            domestic_percent = float(input("Porcentaje nacional: "))
            foreign_percent = float(input("Porcentaje extranjero: "))

            avl.root = avl.insert(avl.root, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)

        elif opcion == '2':
            titulo = input("Título de la película a buscar: ")
            nodo = avl.search(avl.root, titulo)
            if nodo:
                print(f"Película encontrada: {nodo.titulo} ({nodo.año})")
            else:
                print("Película no encontrada")

        elif opcion == '3':
            print("Mostrando el árbol AVL:")
            avl.show_tree()

        elif opcion == '4':
            avl.save_tree()
            print("Árbol guardado como imagen PNG.")

        elif opcion == '5':
            print("Saliendo del programa...")
            break

        else:
            print("Opción no válida. Intenta de nuevo.")

# Ejecutar el menú
menu()

