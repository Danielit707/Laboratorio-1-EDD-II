# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVexKJKla6rG1yedGcRNbwt1uzqpRco6
"""

!pip install graphviz
from IPython.display import Image

from graphviz import Digraph
from IPython.display import display, Image
import os
import platform

class NodoPelicula:
    def __init__(self, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent):
        self.titulo = titulo
        self.año = año
        self.worldwide_earnings = worldwide_earnings
        self.domestic_earnings = domestic_earnings
        self.foreign_earnings = foreign_earnings
        self.domestic_percent = domestic_percent
        self.foreign_percent = foreign_percent
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def get_height(self, nodo):
        if not nodo:
            return 0
        return nodo.height

    def get_balance(self, nodo):
        if not nodo:
            return 0
        return self.get_height(nodo.left) - self.get_height(nodo.right)

    def rotate_right(self, y):
        x = y.left
        T2 = x.right

        x.right = y
        y.left = T2

        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))

        return x

    def rotate_left(self, x):
        y = x.right
        T2 = y.left

        y.left = x
        x.right = T2

        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        return y

    def insert(self, root, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent):
        if not root:
            return NodoPelicula(titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)

        if titulo.lower() < root.titulo.lower():
            root.left = self.insert(root.left, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)
        else:
            root.right = self.insert(root.right, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        balance = self.get_balance(root)

        if balance > 1 and titulo.lower() < root.left.titulo.lower():
            return self.rotate_right(root)

        if balance < -1 and titulo.lower() > root.right.titulo.lower():
            return self.rotate_left(root)

        if balance > 1 and titulo.lower() > root.left.titulo.lower():
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)

        if balance < -1 and titulo.lower() < root.right.titulo.lower():
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)

        return root

    # Método para eliminar un nodo
    def delete(self, root, titulo):
        if not root:
            return root

        if titulo.lower() < root.titulo.lower():
            root.left = self.delete(root.left, titulo)
        elif titulo.lower() > root.titulo.lower():
            root.right = self.delete(root.right, titulo)
        else:
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left

            temp = self.get_min_value_node(root.right)
            root.titulo = temp.titulo
            root.año = temp.año
            root.worldwide_earnings = temp.worldwide_earnings
            root.domestic_earnings = temp.domestic_earnings
            root.foreign_earnings = temp.foreign_earnings
            root.domestic_percent = temp.domestic_percent
            root.foreign_percent = temp.foreign_percent

            root.right = self.delete(root.right, temp.titulo)

        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        balance = self.get_balance(root)

        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.rotate_right(root)

        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)

        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.rotate_left(root)

        if balance < -1 and self.get_balance(root.right) > 0:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)

        return root

    def get_min_value_node(self, root):
        if root is None or root.left is None:
            return root
        return self.get_min_value_node(root.left)

    # Buscar por criterios (año, porcentajes, ganancias)
        # Buscar por criterios (año, porcentajes, ganancias)
    def search_by_criteria(self, root, year=None, foreign_earnings_threshold=None, compare_percents=False):
        if not root:
            return []

        result = []

        # Filtrar según el año, si se especifica
        if year is None or root.año == year:
            # Filtrar si se especifica comparación de porcentajes
            if compare_percents:
                if root.domestic_percent < root.foreign_percent:
                    # Si se especifica umbral de recaudación extranjera
                    if foreign_earnings_threshold is None or root.foreign_earnings >= foreign_earnings_threshold:
                        result.append(root)
            else:
                # Si no se especifica la comparación de porcentajes, solo aplicar umbral de recaudación
                if foreign_earnings_threshold is None or root.foreign_earnings >= foreign_earnings_threshold:
                    result.append(root)

        # Recursión en el subárbol izquierdo y derecho
        result.extend(self.search_by_criteria(root.left, year, foreign_earnings_threshold, compare_percents))
        result.extend(self.search_by_criteria(root.right, year, foreign_earnings_threshold, compare_percents))

        return result


    # Recorrido por niveles
    def level_order(self, root):
        if not root:
            return

        queue = [root]
        while queue:
            current = queue.pop(0)
            print(current.titulo)

            if current.left:
                queue.append(current.left)
            if current.right:
                queue.append(current.right)

    def pre_order(self, root):
        if not root:
            return

        print(f"{root.titulo} ({root.año})")
        self.pre_order(root.left)
        self.pre_order(root.right)

    def visualize_tree(self, root):
      dot = Digraph(format='png')

      def add_edges(nodo):
          if nodo:
              safe_title = nodo.titulo.replace(" ", "_").replace(":", "_")
              dot.node(safe_title, f"{nodo.titulo} ({nodo.año})")
              if nodo.left:
                  safe_left = nodo.left.titulo.replace(" ", "_").replace(":", "_")
                  dot.node(safe_left, f"{nodo.left.titulo} ({nodo.left.año})")
                  dot.edge(safe_title, safe_left)
                  add_edges(nodo.left)
              if nodo.right:
                  safe_right = nodo.right.titulo.replace(" ", "_").replace(":", "_")
                  dot.node(safe_right, f"{nodo.right.titulo} ({nodo.right.año})")
                  dot.edge(safe_title, safe_right)
                  add_edges(nodo.right)

      add_edges(root)
      return dot

    def save_tree(self, filename='avl_tree'):
      dot = self.visualize_tree(self.root)
      dot.render(filename, format='png', cleanup=False)
      print(f"Archivo guardado como {filename}.png")


    def show_tree(self, filename='avl_tree'):
      self.save_tree(filename)
      # Ajuste para asegurar que la imagen sea visible y de un tamaño adecuado
      try:
          image_path = f"{filename}.png"
          if os.path.exists(image_path):
              display(Image(image_path, width=600))  # Ajustar el tamaño si es necesario
          else:
              print("No se encontró el archivo de imagen.")
      except Exception as e:
          print(f"Error mostrando la imagen: {e}")


    def search(self, root, titulo):
        if root is None or root.titulo.lower() == titulo.lower():
            return root

        if titulo.lower() < root.titulo.lower():
            return self.search(root.left, titulo)

        return self.search(root.right, titulo)

    # Función para encontrar el nodo con más ganancias extranjeras
    def find_max_foreign_earnings(self, root):
        if not root:
            return None
        max_node = root
        if root.left:
            left_max = self.find_max_foreign_earnings(root.left)
            if left_max and left_max.foreign_earnings > max_node.foreign_earnings:
                max_node = left_max
        if root.right:
            right_max = self.find_max_foreign_earnings(root.right)
            if right_max and right_max.foreign_earnings > max_node.foreign_earnings:
                max_node = right_max
        return max_node

    # Función para eliminar el nodo con más ganancias extranjeras
    def delete_max_foreign_earnings(self, root):
        max_node = self.find_max_foreign_earnings(root)
        if max_node:
            print(f"Eliminando la película con más ganancias extranjeras: {max_node.titulo}")
            return self.delete(root, max_node.titulo)
        print("No se encontró una película para eliminar.")
        return root

    # Función para encontrar el nodo con menos ganancias domésticas
    def find_min_domestic_earnings(self, root):
        if not root:
            return None
        min_node = root
        if root.left:
            left_min = self.find_min_domestic_earnings(root.left)
            if left_min and left_min.domestic_earnings < min_node.domestic_earnings:
                min_node = left_min
        if root.right:
            right_min = self.find_min_domestic_earnings(root.right)
            if right_min and right_min.domestic_earnings < min_node.domestic_earnings:
                min_node = right_min
        return min_node

    # Función para eliminar el nodo con menos ganancias domésticas
    def delete_min_domestic_earnings(self, root):
        min_node = self.find_min_domestic_earnings(root)
        if min_node:
            print(f"Eliminando la película con menos ganancias domésticas: {min_node.titulo}")
            return self.delete(root, min_node.titulo)
        print("No se encontró una película para eliminar.")
        return root

    # Función para encontrar el nodo con el mayor porcentaje de ganancias extranjeras
    def find_max_foreign_percent(self, root):
        if not root:
            return None
        max_node = root
        if root.left:
            left_max = self.find_max_foreign_percent(root.left)
            if left_max and left_max.foreign_percent > max_node.foreign_percent:
                max_node = left_max
        if root.right:
            right_max = self.find_max_foreign_percent(root.right)
            if right_max and right_max.foreign_percent > max_node.foreign_percent:
                max_node = right_max
        return max_node

    # Función para eliminar el nodo con mayor porcentaje de ganancias extranjeras
    def delete_max_foreign_percent(self, root):
        max_node = self.find_max_foreign_percent(root)
        if max_node:
            print(f"Eliminando la película con mayor porcentaje de ganancias extranjeras: {max_node.titulo}")
            return self.delete(root, max_node.titulo)
        print("No se encontró una película para eliminar.")
        return root

    # Función para encontrar el nodo con el menor porcentaje de ganancias domésticas
    def find_min_domestic_percent(self, root):
        if not root:
            return None
        min_node = root
        if root.left:
            left_min = self.find_min_domestic_percent(root.left)
            if left_min and left_min.domestic_percent < min_node.domestic_percent:
                min_node = left_min
        if root.right:
            right_min = self.find_min_domestic_percent(root.right)
            if right_min and right_min.domestic_percent < min_node.domestic_percent:
                min_node = right_min
        return min_node

    # Función para eliminar el nodo con menor porcentaje de ganancias domésticas
    def delete_min_domestic_percent(self, root):
        min_node = self.find_min_domestic_percent(root)
        if min_node:
            print(f"Eliminando la película con menor porcentaje de ganancias domésticas: {min_node.titulo}")
            return self.delete(root, min_node.titulo)
        print("No se encontró una película para eliminar.")
        return root

def menu():


    while True:
        print("\n--- Menú AVL de Películas ---")
        print("1. Insertar película")
        print("2. Buscar película por título")
        print("3. Eliminar película")
        print("4. Buscar películas por criterios")
        print("5. Mostrar recorrido por niveles")
        print("6. Mostrar árbol")
        print("7. Guardar árbol")
        print("8. Eliminar película con más ganancias extranjeras")
        print("9. Eliminar película con menos ganancias domésticas")
        print("10. Eliminar película con mayor porcentaje de ganancias extranjeras")
        print("11. Eliminar película con menor porcentaje de ganancias domésticas")
        print("12. Salir")

        opcion = input("Elige una opción: ")

        if opcion == '1':
            titulo = input("Título: ")
            año = int(input("Año: "))
            worldwide_earnings = float(input("Recaudación global: "))
            domestic_earnings = float(input("Recaudación nacional: "))
            foreign_earnings = float(input("Recaudación extranjera: "))
            domestic_percent = float(input("Porcentaje nacional: "))
            foreign_percent = float(input("Porcentaje extranjero: "))

            avl.root = avl.insert(avl.root, titulo, año, worldwide_earnings, domestic_earnings, foreign_earnings, domestic_percent, foreign_percent)
            print("Película insertada.")

        elif opcion == '2':
            titulo = input("Introduce el título a buscar: ")
            nodo = avl.search(avl.root, titulo)
            if nodo:
                print(f"Película encontrada: {nodo.titulo}, Año: {nodo.año}")
            else:
                print("Película no encontrada.")

        elif opcion == '3':
            titulo = input("Introduce el título de la película a eliminar: ")
            avl.root = avl.delete(avl.root, titulo)
            print("Película eliminada.")

        elif opcion == '4':
            year = input("Introduce el año (o presiona enter para omitir): ")
            foreign_earnings_threshold = input("Introduce el umbral de ganancias extranjeras (o presiona enter para omitir): ")
            compare_percents = input("¿Comparar porcentajes (S/N)? ").lower() == 's'

            year = int(year) if year else None
            foreign_earnings_threshold = float(foreign_earnings_threshold) if foreign_earnings_threshold else None

            resultados = avl.search_by_criteria(avl.root, year, foreign_earnings_threshold, compare_percents)
            for resultado in resultados:
                print(f"{resultado.titulo}, Año: {resultado.año}, Recaudación extranjera: {resultado.foreign_earnings}")

        elif opcion == '5':
            print("Recorrido por niveles del árbol:")
            avl.level_order(avl.root)

        elif opcion == '6':
            avl.show_tree()

        elif opcion == '7':
            avl.save_tree()
            print("Árbol guardado como imagen.")

        elif opcion == '8':
            avl.root = avl.delete_max_foreign_earnings(avl.root)

        elif opcion == '9':
            avl.root = avl.delete_min_domestic_earnings(avl.root)

        elif opcion == '10':
            avl.root = avl.delete_max_foreign_percent(avl.root)

        elif opcion == '11':
            avl.root = avl.delete_min_domestic_percent(avl.root)

        elif opcion == '12':
            print("Saliendo...")
            break

        else:
            print("Opción no válida, intenta de nuevo.")

avl = AVLTree()
peliculas = [
    {"titulo": "Mission: Impossible II", "año": 2000, "recaudacion_global": 546388108, "recaudacion_domestica": 215409889, "recaudacion_extranjera": 330978219, "porcentaje_domestico": 39.4, "porcentaje_extranjero": 60.6},
    {"titulo": "Gladiator", "año": 2000, "recaudacion_global": 460583960, "recaudacion_domestica": 187705427, "recaudacion_extranjera": 272878533, "porcentaje_domestico": 40.8, "porcentaje_extranjero": 59.2},
    {"titulo": "Cast Away", "año": 2000, "recaudacion_global": 429632142, "recaudacion_domestica": 233632142, "recaudacion_extranjera": 196000000, "porcentaje_domestico": 54.4, "porcentaje_extranjero": 45.6},
    {"titulo": "What Women Want", "año": 2000, "recaudacion_global": 374111707, "recaudacion_domestica": 182811707, "recaudacion_extranjera": 191300000, "porcentaje_domestico": 51.1, "porcentaje_extranjero": 48.9},
    {"titulo": "Dinosaur", "año": 2000, "recaudacion_global": 349822765, "recaudacion_domestica": 137748063, "recaudacion_extranjera": 212074702, "porcentaje_domestico": 39.4, "porcentaje_extranjero": 60.6},
]

for pelicula in peliculas:
    avl.root = avl.insert(avl.root, pelicula["titulo"], pelicula["año"], pelicula["recaudacion_global"], pelicula["recaudacion_domestica"], pelicula["recaudacion_extranjera"], pelicula["porcentaje_domestico"], pelicula["porcentaje_extranjero"])
    print(f'Insertada: {pelicula["titulo"]}')
menu()

